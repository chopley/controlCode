#include <iostream>

#include <utility>

#include <vector>
#include <deque>

using namespace std;

#include "gcp/util/common/Exception.h"
#include "gcp/util/common/LogStream.h"
#include "gcp/util/common/TimeVal.h"

#include "gcp/program/common/Program.h"

#include "gcp/receiver/specific/DIOUtils/DIOColumns.h"
#include "gcp/receiver/specific/MultiThread/DIOServer_Session.h"
#include "gcp/receiver/specific/MultiThread/DIOServer_Support.h"

using namespace gcp::util;
using namespace gcp::program;

KeyTabEntry Program::keywords[] = {
  {"nfilter",  "1000",   "i", "Length of the filter function"},
  {"nsamp",    "100000", "i", "Number of samples to iterate over"},
  {"nskip",    "100",    "i", "Number of samples to skip between inserts"},
  {"nskipinit","100",    "i", "Number of samples to skip initially"},
  {"old",        "t",    "b", "Do old filtering"},
  {"new",        "t",    "b", "Do new filtering"},
  {"loop",       "t",    "b", "Include event dequeuing in the loop"},
  {END_OF_KEYWORDS}
};

void Program::initializeUsage() {};

void runCol(MuxReadout::FIRFilteredDataColumn* col, unsigned nSamples, bool loop);

using namespace MuxReadout; 
using namespace DIOServer;

int Program::main(void)
{
  unsigned nFilter   = Program::getiParameter("nfilter");
  unsigned nSamples  = Program::getiParameter("nsamp");
  unsigned nSkip     = Program::getiParameter("nskip");
  unsigned nSkipInit = Program::getiParameter("nskipinit");
  bool doOld         = Program::getbParameter("old");
  bool doNew         = Program::getbParameter("new");
  bool loop          = Program::getbParameter("loop");

  std::vector<double> filterFunction;
  filterFunction.resize(nFilter);
  for(unsigned i=0; i < nFilter; i++)
    filterFunction[i] = 1.0;

  MuxReadout::FIRFilteredDataColumn*    oldCol = new FIRFilteredDataColumn('2', "b3", true, filterFunction);

  oldCol->setSamplesToSkip(nSkip);
  oldCol->setSkipFirstNSamples(nSkipInit);

  MuxReadout::NewFIRFilteredDataColumn* newCol = new NewFIRFilteredDataColumn('2', "b3", true, filterFunction);

  newCol->setSamplesToSkip(nSkip);
  newCol->setSkipFirstNSamples(nSkipInit);

  TimeVal tValStart, tValStop, tDiff1, tDiff2;

  if(doOld) {
    tValStart.setToCurrentTime();
    runCol(oldCol, nSamples, loop);
    tValStop.setToCurrentTime();
    tDiff1 = tValStop - tValStart;
  } 

  if(doNew) {
    tValStart.setToCurrentTime();
    runCol(newCol, nSamples, loop);
    tValStop.setToCurrentTime();
    tDiff2 = tValStop - tValStart;
  }
  
  COUT(endl << 
       "Elapsed times: " << endl << endl
       << "  deque: " << tDiff1.getTimeInSeconds() << " seconds" << endl
       << "  lists: " << tDiff2.getTimeInSeconds() << " seconds" << endl
       << "  ratio: " << tDiff1.getTimeInSeconds()/tDiff2.getTimeInSeconds() << endl); 
  
  return 0;
}

void runCol(FIRFilteredDataColumn* col, unsigned nSamples, bool loop) 
{
  vector<DIOColumn*> format;
  unsigned char buffer[100000];

  format.push_back(col);
  
  ServerSupport::initialize();
  DataStream_Consumer<Event> consumer("", ServerSupport::clientBackLogAllowance);
  consumer.attach(ServerSupport::getDataSupplier());

  // Get the next event from the supplier                                                                                                                               
  DataWithRefCount<Event> dwrc=consumer.dequeueData();
  Event* event = dwrc.data();

  cout << "Event is: " << (event ? "not" : "") << " NULL" << endl;

  for(unsigned iSamp=0; iSamp < nSamples; iSamp++) {

    try {

      if(loop) {
	DataWithRefCount<Event> dwrc=consumer.dequeueData();
	event = dwrc.data();
	Session::processEvent("", event, buffer, &format);
      } else {
	Session::processEvent("", event, buffer, &format);
      }

    } catch(...) {
      cout << "exception" << endl;
    }
  }
}
