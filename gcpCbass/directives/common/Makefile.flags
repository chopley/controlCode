#-----------------------------------------------------------------------
# This makefile will control flags for compilation of the generic code.
#
# If any of these flags have changed, it will touch util/Directives.h,
# causing any files which include it to be recompiled.
#-----------------------------------------------------------------------

DIRECTIVES := $(wildcard $(GCPTOP)/directives/common/Makefile.directives)

ifeq ($(DIRECTIVES), $(GCPTOP)/directives/common/Makefile.directives)
  include $(GCPTOP)/directives/common/Makefile.directives
else 
  include $(GCPTOP)/directives/common/Makefile.directives.template
endif

#-----------------------------------------------------------------------
# Check that required flags were specified.  These are flags that the
# user must specify
#-----------------------------------------------------------------------

ifeq ($(strip $(COMPILE_WITH_DEBUG)),)
 $(error COMPILE_WITH_DEBUG (1/0) has not been defined. Set up your environment)
endif

ifeq ($(strip $(IS_STABLE)),)
 $(error IS_STABLE (1/0) has not been defined.  Set up your environment)
endif

ifeq ($(strip $(HAVE_VIDEO)),)
 $(error HAVE_VIDEO (1/0) has not been defined.  Set up your environment)
endif

#-----------------------------------------------------------------------
# Now check for things that we can determine from the system
#-----------------------------------------------------------------------

ifneq (,$(findstring Darwin,$(shell uname -a)))

  MAC_OSX = 1
  COMPILE_FOR_64BIT = 0

  X11LD = -L/usr/X11R6/lib -lX11

  HAVE_RT     = 0
  HAVE_FFTW   = 1
  HAVE_MATLAB = 1
  HAVE_IDL    = 0

else

  MAC_OSX = 0

  PROC := $(shell uname -i)
  ifeq ($(strip $(PROC)),i386)
    COMPILE_FOR_64BIT = 0
    X11LD = -L/usr/X11R6/lib -Xlinker -R/usr/X11R6/lib -lX11
  else
    COMPILE_FOR_64BIT = 1
    X11LD = -L/usr/X11R6/lib64 -Xlinker -R/usr/X11R6/lib64 -lX11
  endif

  HAVE_RT     = 1
  HAVE_FFTW   = 1
  HAVE_MATLAB = 1
  HAVE_IDL    = 1

endif

HAVE_MATLAB = 1

# These must be individually exported or a later substitution in a sub
# makefile won't work. There's probably a way to get make to expand
# these on-definition below, but I don't know how to do it.

export MAC_OSX
export COMPILE_WITH_DEBUG
export COMPILE_FOR_64BIT
export IS_STABLE
export HAVE_RT
export HAVE_MATLAB
export HAVE_IDL
export HAVE_VIDEO
export SPECIFIC 
export X11LD

# Create a flag string we can export to avoid having to explicitly
# construct this mess in each makefile below us

GENERIC_FLAGS = -DCOMPILE_WITH_DEBUG=$(COMPILE_WITH_DEBUG) \
	      -DCOMPILE_FOR_64BIT=$(COMPILE_FOR_64BIT) \
	      -DIS_STABLE=$(IS_STABLE) -DSPECIFIC="\"$(SPECIFIC)\"" \
	      -DHAVE_RT=$(HAVE_RT) -DHAVE_VIDEO=$(HAVE_VIDEO) -DHAVE_MATLAB=$(HAVE_MATLAB) -DHAVE_IDL=$(HAVE_IDL) \
	      -DHAVE_FFTW=$(HAVE_FFTW) -DMAC_OSX=$(MAC_OSX)

export GENERIC_FLAGS

# Set up flags for shared library compilation.  Under g++ version
# 4.0.0, at least the Mac OS X version, -shared is no longer a valid
# option

PGLIB = $(PGPLOT_DIR)

ifneq (,$(findstring Darwin,$(shell uname -a)))
  CFITSLIBSO_FLAGS  = -dynamiclib -flat_namespace -undefined suppress
  LIBSO_FLAGS  = -dynamiclib -undefined dynamic_lookup
  LIBSO_SUFFIX = .dylib
  FC           = g++
  FC_FLAGS     = -bind_at_load
  FC_DYNAMIC   = -Xlinker -dynamic
  FC_STATIC    = -Xlinker -static
  FC_PG_PATH   = 
  RPATH        =
  RTLIB        =
  PGLD = -L$(PGLIB) -lcpgplot -lpgplot -lg2c 
else
  CFITSLIBSO_FLAGS  = -shared
  LIBSO_FLAGS  = -shared
  LIBSO_SUFFIX = .so
  FC           = gfortran
  FC_FLAGS     = 
  FC_DYNAMIC   = -Xlinker -Bdynamic
  FC_STATIC    = -Xlinker -Bstatic
  FC_PG_PATH   = -Xlinker -R$(PGLIB)
  RPATH        = -Xlinker -R -Xlinker $(LIBDIR)
  RTLIB        = -lrt
endif

TKLD = -ltk -ltcl -ldl
PGLD = -L$(PGLIB) $(FC_PG_PATH) -lcpgplot -lpgplot -lg2c

export CFITSLIBSO_FLAGS
export LIBSO_FLAGS
export LIBSO_SUFFIX
export FC
export FC_FLAGS
export FC_DYNAMIC
export FC_STATIC
export FC_PG_PATH
export RPATH
export RTLIB
export PGLD
export TKLD

# Modify CCFLAGS if debugging was requested

ifeq ($(COMPILE_WITH_DEBUG),1)	
  CCFLAGS += -g
  CFLAGS  += -g
else
  CCFLAGS += -O
endif

# Add in the generic flags

CCFLAGS += $(GENERIC_FLAGS)

export CCFLAGS

# Modify the binary prefix if we are compiling an unstable version

ifeq ($(IS_STABLE),1)	
  BIN_EXE_PREFIX = $(SPECIFIC)
else
  BIN_EXE_PREFIX = $(SPECIFIC)U
endif

export BIN_EXE_PREFIX

BIN_PREFIX = bin_

export BIN_PREFIX

#-----------------------------------------------------------------------
# See if directives have changed.  The make_directives rule causes the
# current flags to be written into a file Makefile.directives.last.
# If this file exists in the current directory, source it now, to
# check the last value of each flag against the current one.
#-----------------------------------------------------------------------

OLDDIRECTIVES := $(wildcard $(GCPTOP)/directives/common/Makefile.directives.last)

# If the file exists, OLDDIRECTIVES should be non-empty on return from
# the wildcard function

ifeq ($(OLDDIRECTIVES), $(GCPTOP)/directives/common/Makefile.directives.last)

  include $(GCPTOP)/directives/common/Makefile.directives.last

  GENERIC_DIR_HAVE_CHANGED = n

  ifneq ($(COMPILE_WITH_DEBUG), $(OLD_COMPILE_WITH_DEBUG))
    GENERIC_DIR_HAVE_CHANGED = y
  endif

  ifneq ($(IS_STABLE), $(OLD_IS_STABLE))
    GENERIC_DIR_HAVE_CHANGED = y
  endif

  ifneq ($(SPECIFIC), $(OLD_SPECIFIC))
    GENERIC_DIR_HAVE_CHANGED = y
  endif

# If the file doesn't exist, assume that directives have changed

else
  GENERIC_DIR_HAVE_CHANGED = y
endif

export GENERIC_DIR_HAVE_CHANGED
